


ARM Macro Assembler    Page 1 


    1 00000000         ;; RK - Evalbot (Cortex M3 de Texas Instrument)
    2 00000000         ; programme - Jeu de mémorisation reprenant le jeu Simon
                       Says en ASM
    3 00000000         ; par Safi HANIFA et Yanis AIT TAOUIT
    4 00000000         
    5 00000000         
    6 00000000         
    7 00000000                 AREA             |.text|, CODE, READONLY
    8 00000000         
    9 00000000         ; This register controls the clock gating logic in norma
                       l Run mode
   10 00000000 400FE108 
                       SYSCTL_PERIPH_GPIOF
                               EQU              0x400FE108  ; SYSCTL_RCGC2_R (p
                                                            291 datasheet de lm
                                                            3s9b92.pdf)
   11 00000000         
   12 00000000         ; The GPIODATA register is the data register
   13 00000000 40024000 
                       GPIO_PORTE_BASE
                               EQU              0x40024000  ; GPIO Port F (APB)
                                                             base: 0x4002.5000 
                                                            (p416 datasheet de 
                                                            lm3s9B92.pdf)
   14 00000000         
   15 00000000         ; Pul_up
   16 00000000 00000510 
                       GPIO_PUR
                               EQU              0x510       ; GPIO Pull-Up (p43
                                                            2 datasheet de lm3s
                                                            9B92.pdf)
   17 00000000         
   18 00000000         ; Digital enable register
   19 00000000         ; To use the pin as a digital input or output, the corre
                       sponding GPIODEN bit must be set.
   20 00000000 0000051C 
                       GPIO_O_DEN
                               EQU              0x0000051C  ; GPIO Digital Enab
                                                            le (p437 datasheet 
                                                            de lm3s9B92.pdf)
   21 00000000         
   22 00000000         ; PORT E : sélection du BUMPER GAUCHE, LIGNE 0 du port E
                       
   23 00000000 00000001 
                       PORT0   EQU              0x01
   24 00000000         
   25 00000000         ; PORT E : sélection du BUMPER GAUCHE, LIGNE 0 du port E
                       
   26 00000000 00000002 
                       PORT1   EQU              0x02
   27 00000000         
   28 00000000         ; Sélections des 2 BUMPERS
   29 00000000 00000003 
                       PORT01  EQU              0x03
   30 00000000         
   31 00000000         ; Taille du tableau pour la séquence
   32 00000000 00000005 
                       TAILLE  EQU              0x5
   33 00000000         



ARM Macro Assembler    Page 2 


   34 00000000                 ENTRY
   35 00000000                 EXPORT           __main
   36 00000000         
   37 00000000                 IMPORT           CLIGNOTE2
   38 00000000                 IMPORT           CLIGNOTE3
   39 00000000                 IMPORT           CLIGNOTEG
   40 00000000                 IMPORT           CLIGNOTED
   41 00000000                 IMPORT           DANSE
   42 00000000         ;IMPORT WAIT
   43 00000000         
   44 00000000         ;; The IMPORT command specifies that a symbol is defined
                        in a shared object at runtime.
   45 00000000                 IMPORT           MOTEUR_INIT ; initialise les mo
                                                            teurs (configure le
                                                            s pwms + GPIO)
   46 00000000         
   47 00000000                 IMPORT           MOTEUR_DROIT_ON ; activer le mo
                                                            teur droit
   48 00000000                 IMPORT           MOTEUR_DROIT_OFF ; déactiver le
                                                             moteur droit
   49 00000000                 IMPORT           MOTEUR_DROIT_AVANT ; moteur dro
                                                            it tourne vers l'av
                                                            ant
   50 00000000                 IMPORT           MOTEUR_DROIT_ARRIERE ; moteur d
                                                            roit tourne vers l'
                                                            arrière
   51 00000000                 IMPORT           MOTEUR_DROIT_INVERSE ; inverse 
                                                            le sens de rotation
                                                             du moteur droit
   52 00000000         
   53 00000000                 IMPORT           MOTEUR_GAUCHE_ON ; activer le m
                                                            oteur gauche
   54 00000000                 IMPORT           MOTEUR_GAUCHE_OFF ; déactiver l
                                                            e moteur gauche
   55 00000000                 IMPORT           MOTEUR_GAUCHE_AVANT ; moteur ga
                                                            uche tourne vers l'
                                                            avant
   56 00000000                 IMPORT           MOTEUR_GAUCHE_ARRIERE ; moteur 
                                                            gauche tourne vers 
                                                            l'arrière
   57 00000000                 IMPORT           MOTEUR_GAUCHE_INVERSE ; inverse
                                                             le sens de rotatio
                                                            n du moteur gauche
   58 00000000         
   59 00000000         
   60 00000000         ;----------------------SWITCH-----------------;
   61 00000000                 IMPORT           CONFIG_SWITCH ; configure SW (c
                                                            onfigure pwms + GPI
                                                            O)
   62 00000000                 IMPORT           READ_STATE_SW1 
                                                            ; lit l'état de SW1
                                                            
   63 00000000                 IMPORT           READ_STATE_SW2 
                                                            ; lit l'état de SW2
                                                            
   64 00000000         
   65 00000000         
   66 00000000         
   67 00000000         



ARM Macro Assembler    Page 3 


   68 00000000         __main
   69 00000000         
   70 00000000 4E37            LDR              r6, = SYSCTL_PERIPH_GPIOF
   71 00000002 F04F 0030       MOV              r0, #0x00000030
   72 00000006 6030            STR              r0, [r6]
   73 00000008         
   74 00000008         ;Délai de 3 horloges systèmes
   75 00000008 BF00            NOP
   76 0000000A BF00            NOP
   77 0000000C BF00            NOP
   78 0000000E         
   79 0000000E         ; Activer fonction digitale - PORT E 
   80 0000000E 4F35            LDR              r7, = GPIO_PORTE_BASE+GPIO_O_DE
N
   81 00000010 F04F 0603       LDR              r6, = PORT01
   82 00000014 603E            STR              r6, [r7]
   83 00000016         
   84 00000016 4F34            LDR              r7, = GPIO_PORTE_BASE+GPIO_PUR
   85 00000018 F04F 0603       LDR              r6, = PORT01
   86 0000001C 603E            STR              r6, [r7]
   87 0000001E         
   88 0000001E         
   89 0000001E         ; Clignote 2 fois pour lancer le jeu
   90 0000001E         
   91 0000001E F7FF FFFE       BL               CLIGNOTE2
   92 00000022         
   93 00000022         ;Début du jeu
   94 00000022         ;Initialisation des variables utilisées
   95 00000022         
   96 00000022         init
   97 00000022 F04F 0000       MOV              r0,#0
   98 00000026 F04F 0105       LDR              r1,=TAILLE
   99 0000002A 4A30            LDR              r2,=SEQUENCE
  100 0000002C F04F 0400       MOV              r4,#0
  101 00000030 F81F 5004       LDRB             r5,SEQUENCE
  102 00000034 E7FF            B                loop
  103 00000036         
  104 00000036         
  105 00000036         ; Boucle qui vérifie si on a atteint la fin de la séquen
                       ce
  106 00000036         loop
  107 00000036 4281            CMP              r1, r0      ; Comparaison entre
                                                             l'index actuel et 
                                                            la longueur de la s
                                                            équence
  108 00000038 D048            BEQ              win         ; Victoire car tout
                                                            e la séquence a été
                                                             reproduite sans er
                                                            reur 
  109 0000003A F100 0001       ADD              r0, #1      ; Incrémentation de
                                                             l'index
  110 0000003E F04F 0400       MOV              r4, #0
  111 00000042 E7FF            B                sequence
  112 00000044         
  113 00000044         
  114 00000044         ; On compte le nombre de case à lire dans la séquence
  115 00000044 42A0    sequence
                               CMP              r0, r4      ; Comparaison nombr
                                                            e de LED à afficher



ARM Macro Assembler    Page 4 


                                                            
  116 00000046 F04F 0C00       MOV              r12, #0     ; 
  117 0000004A         
  118 0000004A D00B            BEQ              bumpers     ; Si toute la séque
                                                            nce qui doit s'affi
                                                            cher a clignoté : o
                                                            n vérifie les bumpe
                                                            rs
  119 0000004C         ; On choisit si on doit allumer la LED1 ou la LED2
  120 0000004C 5D15            LDRB             r5, [r2, r4]
  121 0000004E F104 0401       ADD              r4, #1
  122 00000052 2D00            CMP              r5, #0
  123 00000054 D000            BEQ              test1
  124 00000056 D102            BNE              test2
  125 00000058         
  126 00000058         ; Allumage LED1
  127 00000058 F7FF FFFE 
                       test1   BL               CLIGNOTEG
  128 0000005C E7F2            B                sequence
  129 0000005E         
  130 0000005E         ; Allumage LED2
  131 0000005E F7FF FFFE 
                       test2   BL               CLIGNOTED
  132 00000062 E7EF            B                sequence
  133 00000064         
  134 00000064         ; Vérification des bumpers
  135 00000064 4564    bumpers CMP              r4, r12
  136 00000066 D0E6            BEQ              loop        ; Si tous les bumpe
                                                            rs ont été activés 
                                                            sans erreur :on rep
                                                            rend l'affichage de
                                                             la séquence
  137 00000068 4615            MOV              r5, r2
  138 0000006A E7FF            B                lireEntrees ; Sinon  on lit les
                                                             états des bumpers
  139 0000006C         
  140 0000006C         
  141 0000006C         
  142 0000006C         lireEntrees
  143 0000006C         ; Lecture de l'état du BUMPER DROIT
  144 0000006C 4F20            LDR              r7, = GPIO_PORTE_BASE + (PORT0<
<2)
  145 0000006E F8D7 9000       LDR              r9, [r7]
  146 00000072 F1B9 0F01       CMP              r9, #0x01
  147 00000076 D106            BNE              save1       ; Si le bumper droi
                                                            t a été activé
  148 00000078         
  149 00000078         ; Lecture de l'état du BUMPER GAUCHE
  150 00000078 4F1E            LDR              r7, = GPIO_PORTE_BASE +(PORT1<<
2)
  151 0000007A F8D7 9000       LDR              r9, [r7]
  152 0000007E F1B9 0F02       CMP              r9, #0x02
  153 00000082 D10B            BNE              save0       ; Si le bumper gauc
                                                            he a été activé
  154 00000084         
  155 00000084         ; Si aucun n'a été activé on relit les états
  156 00000084 E7F2            B                lireEntrees
  157 00000086         
  158 00000086         



ARM Macro Assembler    Page 5 


  159 00000086         ; On attend d'avoir l'entrée nécessaire à la vérificatio
                       n 
  160 00000086         save1
  161 00000086 F812 500C       LDRB             r5, [r2,r12]
  162 0000008A F10C 0C01       ADD              r12, #1
  163 0000008E F04F 0800       MOV              r8, #0
  164 00000092 F000 F820       BL               WAIT
  165 00000096         
  166 00000096         
  167 00000096         ; Si erreur on envoie vers le scénario de la défaite, si
                       non on reprend la vérification des bumpers
  168 00000096         compared
  169 00000096 2D01            CMP              r5, #1
  170 00000098 D0E4            BEQ              bumpers
  171 0000009A E00A            B                lose
  172 0000009C         
  173 0000009C         ; On attend d'avoir l'entrée nécessaire à la vérificatio
                       n
  174 0000009C         save0
  175 0000009C F812 500C       LDRB             r5, [r2,r12]
  176 000000A0 F10C 0C01       ADD              r12, #1
  177 000000A4 F04F 0800       MOV              r8, #0
  178 000000A8 F000 F815       BL               WAIT
  179 000000AC         
  180 000000AC         
  181 000000AC         ; Si erreur on envoie vers le scénario de la défaite, si
                       non on reprend la vérification des bumpers
  182 000000AC 2D00    compareg
                               CMP              r5, #0
  183 000000AE D0D9            BEQ              bumpers
  184 000000B0 E7FF            B                lose
  185 000000B2         
  186 000000B2         ; Scénario de défaite : on fait clignoter 3 fois les LED
                       S et on va à la fin du programme
  187 000000B2         lose
  188 000000B2 F7FF FFFE       BL               CLIGNOTE3
  189 000000B6 E012            B                fin
  190 000000B8         ;BL restart_sequence
  191 000000B8         
  192 000000B8         
  193 000000B8         restart_sequence
  194 000000B8 E92D 5C41       PUSH             { R0, R6, R10-R12, LR }
  195 000000BC F7FF FFFE       BL               CONFIG_SWITCH
  196 000000C0         
  197 000000C0 F7FF FFFE       BL               READ_STATE_SW2
  198 000000C4 D1F8            BNE              restart_sequence
  199 000000C6 E7BD            B                sequence
  200 000000C8 E8BD 9C41       POP              { R0, R6, R10-R12, PC }
  201 000000CC         
  202 000000CC         ; Scénario de victoire : on fait clignoter 2 fois les LE
                       DS
  203 000000CC         ; et le robot fait un tour sur lui même (danse de la joi
                       e), puis on va à la fin du programme
  204 000000CC F7FF FFFE 
                       win     BL               CLIGNOTE2
  205 000000D0 F7FF FFFE       BL               DANSE
  206 000000D4 E003            B                fin
  207 000000D6         
  208 000000D6 4908    WAIT    LDR              r1, =0x002FFFFF



ARM Macro Assembler    Page 6 


  209 000000D8 3901    wait1   SUBS             r1, #1
  210 000000DA D1FD            BNE              wait1
  211 000000DC 4770            BX               LR
  212 000000DE         
  213 000000DE         ; Fin du programme
  214 000000DE         fin
  215 000000DE         ; Initialisation de la séquence des LEDS (0 : LED gauche
                       , 1 : LED droite)
  216 000000DE 00 00 400FE108 
              4002451C 
              40024510 
              00000000 
              40024004 
              40024008 
              002FFFFF         AREA             constants, DATA, READONLY
  217 00000000 01 00 00 
              01 00    SEQUENCE
                               DCB              1,0,0,1,0
  218 00000005         
  219 00000005         
  220 00000005                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\simonsays.d -o.\objects\simonsays.o -I.\RTE\_Target_1 -I
C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\AR
M\CMSIS\5.9.0\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --predefine
="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 537" --predefine="_RTE
_ SETA 1" --predefine="ARMCM3 SETA 1" --predefine="_RTE_ SETA 1" --list=.\listi
ngs\simonsays.lst simonSays.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 7 in file simonSays.s
   Uses
      None
Comment: .text unused
WAIT 000000D6

Symbol: WAIT
   Definitions
      At line 208 in file simonSays.s
   Uses
      At line 164 in file simonSays.s
      At line 178 in file simonSays.s

__main 00000000

Symbol: __main
   Definitions
      At line 68 in file simonSays.s
   Uses
      At line 35 in file simonSays.s
Comment: __main used once
bumpers 00000064

Symbol: bumpers
   Definitions
      At line 135 in file simonSays.s
   Uses
      At line 118 in file simonSays.s
      At line 170 in file simonSays.s
      At line 183 in file simonSays.s

compared 00000096

Symbol: compared
   Definitions
      At line 168 in file simonSays.s
   Uses
      None
Comment: compared unused
compareg 000000AC

Symbol: compareg
   Definitions
      At line 182 in file simonSays.s
   Uses
      None
Comment: compareg unused
fin 000000DE

Symbol: fin
   Definitions
      At line 214 in file simonSays.s
   Uses
      At line 189 in file simonSays.s
      At line 206 in file simonSays.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


init 00000022

Symbol: init
   Definitions
      At line 96 in file simonSays.s
   Uses
      None
Comment: init unused
lireEntrees 0000006C

Symbol: lireEntrees
   Definitions
      At line 142 in file simonSays.s
   Uses
      At line 138 in file simonSays.s
      At line 156 in file simonSays.s

loop 00000036

Symbol: loop
   Definitions
      At line 106 in file simonSays.s
   Uses
      At line 102 in file simonSays.s
      At line 136 in file simonSays.s

lose 000000B2

Symbol: lose
   Definitions
      At line 187 in file simonSays.s
   Uses
      At line 171 in file simonSays.s
      At line 184 in file simonSays.s

restart_sequence 000000B8

Symbol: restart_sequence
   Definitions
      At line 193 in file simonSays.s
   Uses
      At line 198 in file simonSays.s
Comment: restart_sequence used once
save0 0000009C

Symbol: save0
   Definitions
      At line 174 in file simonSays.s
   Uses
      At line 153 in file simonSays.s
Comment: save0 used once
save1 00000086

Symbol: save1
   Definitions
      At line 160 in file simonSays.s
   Uses
      At line 147 in file simonSays.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: save1 used once
sequence 00000044

Symbol: sequence
   Definitions
      At line 115 in file simonSays.s
   Uses
      At line 111 in file simonSays.s
      At line 128 in file simonSays.s
      At line 132 in file simonSays.s
      At line 199 in file simonSays.s

test1 00000058

Symbol: test1
   Definitions
      At line 127 in file simonSays.s
   Uses
      At line 123 in file simonSays.s
Comment: test1 used once
test2 0000005E

Symbol: test2
   Definitions
      At line 131 in file simonSays.s
   Uses
      At line 124 in file simonSays.s
Comment: test2 used once
wait1 000000D8

Symbol: wait1
   Definitions
      At line 209 in file simonSays.s
   Uses
      At line 210 in file simonSays.s
Comment: wait1 used once
win 000000CC

Symbol: win
   Definitions
      At line 204 in file simonSays.s
   Uses
      At line 108 in file simonSays.s
Comment: win used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SEQUENCE 00000000

Symbol: SEQUENCE
   Definitions
      At line 217 in file simonSays.s
   Uses
      At line 99 in file simonSays.s
      At line 101 in file simonSays.s

constants 00000000

Symbol: constants
   Definitions
      At line 216 in file simonSays.s
   Uses
      None
Comment: constants unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_O_DEN 0000051C

Symbol: GPIO_O_DEN
   Definitions
      At line 20 in file simonSays.s
   Uses
      At line 80 in file simonSays.s
Comment: GPIO_O_DEN used once
GPIO_PORTE_BASE 40024000

Symbol: GPIO_PORTE_BASE
   Definitions
      At line 13 in file simonSays.s
   Uses
      At line 80 in file simonSays.s
      At line 84 in file simonSays.s
      At line 144 in file simonSays.s
      At line 150 in file simonSays.s

GPIO_PUR 00000510

Symbol: GPIO_PUR
   Definitions
      At line 16 in file simonSays.s
   Uses
      At line 84 in file simonSays.s
Comment: GPIO_PUR used once
PORT0 00000001

Symbol: PORT0
   Definitions
      At line 23 in file simonSays.s
   Uses
      At line 144 in file simonSays.s
Comment: PORT0 used once
PORT01 00000003

Symbol: PORT01
   Definitions
      At line 29 in file simonSays.s
   Uses
      At line 81 in file simonSays.s
      At line 85 in file simonSays.s

PORT1 00000002

Symbol: PORT1
   Definitions
      At line 26 in file simonSays.s
   Uses
      At line 150 in file simonSays.s
Comment: PORT1 used once
SYSCTL_PERIPH_GPIOF 400FE108

Symbol: SYSCTL_PERIPH_GPIOF
   Definitions
      At line 10 in file simonSays.s
   Uses
      At line 70 in file simonSays.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: SYSCTL_PERIPH_GPIOF used once
TAILLE 00000005

Symbol: TAILLE
   Definitions
      At line 32 in file simonSays.s
   Uses
      At line 98 in file simonSays.s
Comment: TAILLE used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

CLIGNOTE2 00000000

Symbol: CLIGNOTE2
   Definitions
      At line 37 in file simonSays.s
   Uses
      At line 91 in file simonSays.s
      At line 204 in file simonSays.s

CLIGNOTE3 00000000

Symbol: CLIGNOTE3
   Definitions
      At line 38 in file simonSays.s
   Uses
      At line 188 in file simonSays.s
Comment: CLIGNOTE3 used once
CLIGNOTED 00000000

Symbol: CLIGNOTED
   Definitions
      At line 40 in file simonSays.s
   Uses
      At line 131 in file simonSays.s
Comment: CLIGNOTED used once
CLIGNOTEG 00000000

Symbol: CLIGNOTEG
   Definitions
      At line 39 in file simonSays.s
   Uses
      At line 127 in file simonSays.s
Comment: CLIGNOTEG used once
CONFIG_SWITCH 00000000

Symbol: CONFIG_SWITCH
   Definitions
      At line 61 in file simonSays.s
   Uses
      At line 195 in file simonSays.s
Comment: CONFIG_SWITCH used once
DANSE 00000000

Symbol: DANSE
   Definitions
      At line 41 in file simonSays.s
   Uses
      At line 205 in file simonSays.s
Comment: DANSE used once
MOTEUR_DROIT_ARRIERE 00000000

Symbol: MOTEUR_DROIT_ARRIERE
   Definitions
      At line 50 in file simonSays.s
   Uses
      None
Comment: MOTEUR_DROIT_ARRIERE unused
MOTEUR_DROIT_AVANT 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: MOTEUR_DROIT_AVANT
   Definitions
      At line 49 in file simonSays.s
   Uses
      None
Comment: MOTEUR_DROIT_AVANT unused
MOTEUR_DROIT_INVERSE 00000000

Symbol: MOTEUR_DROIT_INVERSE
   Definitions
      At line 51 in file simonSays.s
   Uses
      None
Comment: MOTEUR_DROIT_INVERSE unused
MOTEUR_DROIT_OFF 00000000

Symbol: MOTEUR_DROIT_OFF
   Definitions
      At line 48 in file simonSays.s
   Uses
      None
Comment: MOTEUR_DROIT_OFF unused
MOTEUR_DROIT_ON 00000000

Symbol: MOTEUR_DROIT_ON
   Definitions
      At line 47 in file simonSays.s
   Uses
      None
Comment: MOTEUR_DROIT_ON unused
MOTEUR_GAUCHE_ARRIERE 00000000

Symbol: MOTEUR_GAUCHE_ARRIERE
   Definitions
      At line 56 in file simonSays.s
   Uses
      None
Comment: MOTEUR_GAUCHE_ARRIERE unused
MOTEUR_GAUCHE_AVANT 00000000

Symbol: MOTEUR_GAUCHE_AVANT
   Definitions
      At line 55 in file simonSays.s
   Uses
      None
Comment: MOTEUR_GAUCHE_AVANT unused
MOTEUR_GAUCHE_INVERSE 00000000

Symbol: MOTEUR_GAUCHE_INVERSE
   Definitions
      At line 57 in file simonSays.s
   Uses
      None
Comment: MOTEUR_GAUCHE_INVERSE unused
MOTEUR_GAUCHE_OFF 00000000

Symbol: MOTEUR_GAUCHE_OFF
   Definitions
      At line 54 in file simonSays.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

   Uses
      None
Comment: MOTEUR_GAUCHE_OFF unused
MOTEUR_GAUCHE_ON 00000000

Symbol: MOTEUR_GAUCHE_ON
   Definitions
      At line 53 in file simonSays.s
   Uses
      None
Comment: MOTEUR_GAUCHE_ON unused
MOTEUR_INIT 00000000

Symbol: MOTEUR_INIT
   Definitions
      At line 45 in file simonSays.s
   Uses
      None
Comment: MOTEUR_INIT unused
READ_STATE_SW1 00000000

Symbol: READ_STATE_SW1
   Definitions
      At line 62 in file simonSays.s
   Uses
      None
Comment: READ_STATE_SW1 unused
READ_STATE_SW2 00000000

Symbol: READ_STATE_SW2
   Definitions
      At line 63 in file simonSays.s
   Uses
      At line 197 in file simonSays.s
Comment: READ_STATE_SW2 used once
19 symbols
385 symbols in table
